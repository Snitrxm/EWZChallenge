"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _ActivityObjectFragment = _interopRequireDefault(require("./ActivityObjectFragment"));

var _ActivityPutObjectAllOf = _interopRequireDefault(require("./ActivityPutObjectAllOf"));

var _NumberBoolean = _interopRequireDefault(require("./NumberBoolean"));

/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * The ActivityPutObject model module.
 * @module model/ActivityPutObject
 * @version 1.0.0
 */
var ActivityPutObject = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>ActivityPutObject</code>.
   * @alias module:model/ActivityPutObject
   * @implements module:model/ActivityObjectFragment
   * @implements module:model/ActivityPutObjectAllOf
   */
  function ActivityPutObject() {
    (0, _classCallCheck2["default"])(this, ActivityPutObject);

    _ActivityObjectFragment["default"].initialize(this);

    _ActivityPutObjectAllOf["default"].initialize(this);

    ActivityPutObject.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  (0, _createClass2["default"])(ActivityPutObject, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>ActivityPutObject</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActivityPutObject} obj Optional instance to populate.
     * @return {module:model/ActivityPutObject} The populated <code>ActivityPutObject</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new ActivityPutObject();

        _ActivityObjectFragment["default"].constructFromObject(data, obj);

        _ActivityPutObjectAllOf["default"].constructFromObject(data, obj);

        if (data.hasOwnProperty('due_date')) {
          obj['due_date'] = _ApiClient["default"].convertToType(data['due_date'], 'Date');
          delete data['due_date'];
        }

        if (data.hasOwnProperty('due_time')) {
          obj['due_time'] = _ApiClient["default"].convertToType(data['due_time'], 'String');
          delete data['due_time'];
        }

        if (data.hasOwnProperty('duration')) {
          obj['duration'] = _ApiClient["default"].convertToType(data['duration'], 'String');
          delete data['duration'];
        }

        if (data.hasOwnProperty('deal_id')) {
          obj['deal_id'] = _ApiClient["default"].convertToType(data['deal_id'], 'Number');
          delete data['deal_id'];
        }

        if (data.hasOwnProperty('lead_id')) {
          obj['lead_id'] = _ApiClient["default"].convertToType(data['lead_id'], 'String');
          delete data['lead_id'];
        }

        if (data.hasOwnProperty('person_id')) {
          obj['person_id'] = _ApiClient["default"].convertToType(data['person_id'], 'Number');
          delete data['person_id'];
        }

        if (data.hasOwnProperty('org_id')) {
          obj['org_id'] = _ApiClient["default"].convertToType(data['org_id'], 'Number');
          delete data['org_id'];
        }

        if (data.hasOwnProperty('note')) {
          obj['note'] = _ApiClient["default"].convertToType(data['note'], 'String');
          delete data['note'];
        }

        if (data.hasOwnProperty('location')) {
          obj['location'] = _ApiClient["default"].convertToType(data['location'], 'String');
          delete data['location'];
        }

        if (data.hasOwnProperty('public_description')) {
          obj['public_description'] = _ApiClient["default"].convertToType(data['public_description'], 'String');
          delete data['public_description'];
        }

        if (data.hasOwnProperty('subject')) {
          obj['subject'] = _ApiClient["default"].convertToType(data['subject'], 'String');
          delete data['subject'];
        }

        if (data.hasOwnProperty('type')) {
          obj['type'] = _ApiClient["default"].convertToType(data['type'], 'String');
          delete data['type'];
        }

        if (data.hasOwnProperty('user_id')) {
          obj['user_id'] = _ApiClient["default"].convertToType(data['user_id'], 'Number');
          delete data['user_id'];
        }

        if (data.hasOwnProperty('participants')) {
          obj['participants'] = _ApiClient["default"].convertToType(data['participants'], [Object]);
          delete data['participants'];
        }

        if (data.hasOwnProperty('busy_flag')) {
          obj['busy_flag'] = _ApiClient["default"].convertToType(data['busy_flag'], 'Boolean');
          delete data['busy_flag'];
        }

        if (data.hasOwnProperty('attendees')) {
          obj['attendees'] = _ApiClient["default"].convertToType(data['attendees'], [Object]);
          delete data['attendees'];
        }

        if (data.hasOwnProperty('done')) {
          obj['done'] = _ApiClient["default"].convertToType(data['done'], _NumberBoolean["default"]);
          delete data['done'];
        }

        if (Object.keys(data).length > 0) {
          Object.assign(obj, data);
        }
      }

      return obj;
    }
  }]);
  return ActivityPutObject;
}();
/**
 * The due date of the activity. Format: YYYY-MM-DD
 * @member {Date} due_date
 */


ActivityPutObject.prototype['due_date'] = undefined;
/**
 * The due time of the activity in UTC. Format: HH:MM
 * @member {String} due_time
 */

ActivityPutObject.prototype['due_time'] = undefined;
/**
 * The duration of the activity. Format: HH:MM
 * @member {String} duration
 */

ActivityPutObject.prototype['duration'] = undefined;
/**
 * The ID of the deal this activity is associated with
 * @member {Number} deal_id
 */

ActivityPutObject.prototype['deal_id'] = undefined;
/**
 * The ID of the lead this activity is associated with
 * @member {String} lead_id
 */

ActivityPutObject.prototype['lead_id'] = undefined;
/**
 * The ID of the person this activity is associated with
 * @member {Number} person_id
 */

ActivityPutObject.prototype['person_id'] = undefined;
/**
 * The ID of the organization this activity is associated with
 * @member {Number} org_id
 */

ActivityPutObject.prototype['org_id'] = undefined;
/**
 * The note of the activity (HTML format)
 * @member {String} note
 */

ActivityPutObject.prototype['note'] = undefined;
/**
 * The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
 * @member {String} location
 */

ActivityPutObject.prototype['location'] = undefined;
/**
 * Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
 * @member {String} public_description
 */

ActivityPutObject.prototype['public_description'] = undefined;
/**
 * The subject of the activity
 * @member {String} subject
 */

ActivityPutObject.prototype['subject'] = undefined;
/**
 * The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
 * @member {String} type
 */

ActivityPutObject.prototype['type'] = undefined;
/**
 * The ID of the user whom the activity is assigned to
 * @member {Number} user_id
 */

ActivityPutObject.prototype['user_id'] = undefined;
/**
 * List of multiple persons (participants) this activity is associated with. It requires a structure as follows: `[{\"person_id\":1,\"primary_flag\":true}]`
 * @member {Array.<Object>} participants
 */

ActivityPutObject.prototype['participants'] = undefined;
/**
 * Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
 * @member {module:model/ActivityPutObject.BusyFlagEnum} busy_flag
 */

ActivityPutObject.prototype['busy_flag'] = undefined;
/**
 * The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{\"email_address\":\"mail@example.org\"}]` or `[{\"person_id\":1, \"email_address\":\"mail@example.org\"}]`
 * @member {Array.<Object>} attendees
 */

ActivityPutObject.prototype['attendees'] = undefined;
/**
 * Whether the activity is done or not. 0 = Not done, 1 = Done
 * @member {module:model/NumberBoolean} done
 */

ActivityPutObject.prototype['done'] = undefined; // Implement ActivityObjectFragment interface:

/**
 * The due date of the activity. Format: YYYY-MM-DD
 * @member {Date} due_date
 */

_ActivityObjectFragment["default"].prototype['due_date'] = undefined;
/**
 * The due time of the activity in UTC. Format: HH:MM
 * @member {String} due_time
 */

_ActivityObjectFragment["default"].prototype['due_time'] = undefined;
/**
 * The duration of the activity. Format: HH:MM
 * @member {String} duration
 */

_ActivityObjectFragment["default"].prototype['duration'] = undefined;
/**
 * The ID of the deal this activity is associated with
 * @member {Number} deal_id
 */

_ActivityObjectFragment["default"].prototype['deal_id'] = undefined;
/**
 * The ID of the lead this activity is associated with
 * @member {String} lead_id
 */

_ActivityObjectFragment["default"].prototype['lead_id'] = undefined;
/**
 * The ID of the person this activity is associated with
 * @member {Number} person_id
 */

_ActivityObjectFragment["default"].prototype['person_id'] = undefined;
/**
 * The ID of the organization this activity is associated with
 * @member {Number} org_id
 */

_ActivityObjectFragment["default"].prototype['org_id'] = undefined;
/**
 * The note of the activity (HTML format)
 * @member {String} note
 */

_ActivityObjectFragment["default"].prototype['note'] = undefined;
/**
 * The address of the activity. Pipedrive will automatically check if the location matches a geo-location on Google maps.
 * @member {String} location
 */

_ActivityObjectFragment["default"].prototype['location'] = undefined;
/**
 * Additional details about the activity that is synced to your external calendar. Unlike the note added to the activity, the description is publicly visible to any guests added to the activity.
 * @member {String} public_description
 */

_ActivityObjectFragment["default"].prototype['public_description'] = undefined; // Implement ActivityPutObjectAllOf interface:

/**
 * The subject of the activity
 * @member {String} subject
 */

_ActivityPutObjectAllOf["default"].prototype['subject'] = undefined;
/**
 * The type of the activity. This is in correlation with the `key_string` parameter of ActivityTypes.
 * @member {String} type
 */

_ActivityPutObjectAllOf["default"].prototype['type'] = undefined;
/**
 * The ID of the user whom the activity is assigned to
 * @member {Number} user_id
 */

_ActivityPutObjectAllOf["default"].prototype['user_id'] = undefined;
/**
 * List of multiple persons (participants) this activity is associated with. It requires a structure as follows: `[{\"person_id\":1,\"primary_flag\":true}]`
 * @member {Array.<Object>} participants
 */

_ActivityPutObjectAllOf["default"].prototype['participants'] = undefined;
/**
 * Set the activity as 'Busy' or 'Free'. If the flag is set to `true`, your customers will not be able to book that time slot through any Scheduler links. The flag can also be unset by never setting it or overriding it with `null`. When the value of the flag is unset (`null`), the flag defaults to 'Busy' if it has a time set, and 'Free' if it is an all-day event without specified time.
 * @member {module:model/ActivityPutObjectAllOf.BusyFlagEnum} busy_flag
 */

_ActivityPutObjectAllOf["default"].prototype['busy_flag'] = undefined;
/**
 * The attendees of the activity. This can be either your existing Pipedrive contacts or an external email address. It requires a structure as follows: `[{\"email_address\":\"mail@example.org\"}]` or `[{\"person_id\":1, \"email_address\":\"mail@example.org\"}]`
 * @member {Array.<Object>} attendees
 */

_ActivityPutObjectAllOf["default"].prototype['attendees'] = undefined;
/**
 * Whether the activity is done or not. 0 = Not done, 1 = Done
 * @member {module:model/NumberBoolean} done
 */

_ActivityPutObjectAllOf["default"].prototype['done'] = undefined;
/**
 * Allowed values for the <code>busy_flag</code> property.
 * @enum {Boolean}
 * @readonly
 */

ActivityPutObject['BusyFlagEnum'] = {
  /**
   * value: "true"
   * @const
   */
  "true": "true",

  /**
   * value: "false"
   * @const
   */
  "false": "false"
};
var _default = ActivityPutObject;
exports["default"] = _default;
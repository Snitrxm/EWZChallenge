"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

/**
 * Pipedrive API v1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

/**
 * The BaseComment model module.
 * @module model/BaseComment
 * @version 1.0.0
 */
var BaseComment = /*#__PURE__*/function () {
  /**
   * Constructs a new <code>BaseComment</code>.
   * @alias module:model/BaseComment
   */
  function BaseComment() {
    (0, _classCallCheck2["default"])(this, BaseComment);
    BaseComment.initialize(this);
  }
  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */


  (0, _createClass2["default"])(BaseComment, null, [{
    key: "initialize",
    value: function initialize(obj) {}
    /**
     * Constructs a <code>BaseComment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BaseComment} obj Optional instance to populate.
     * @return {module:model/BaseComment} The populated <code>BaseComment</code> instance.
     */

  }, {
    key: "constructFromObject",
    value: function constructFromObject(data, obj) {
      if (data) {
        obj = obj || new BaseComment();

        if (data.hasOwnProperty('uuid')) {
          obj['uuid'] = _ApiClient["default"].convertToType(data['uuid'], 'String');
          delete data['uuid'];
        }

        if (data.hasOwnProperty('active_flag')) {
          obj['active_flag'] = _ApiClient["default"].convertToType(data['active_flag'], 'Boolean');
          delete data['active_flag'];
        }

        if (data.hasOwnProperty('add_time')) {
          obj['add_time'] = _ApiClient["default"].convertToType(data['add_time'], 'String');
          delete data['add_time'];
        }

        if (data.hasOwnProperty('update_time')) {
          obj['update_time'] = _ApiClient["default"].convertToType(data['update_time'], 'String');
          delete data['update_time'];
        }

        if (data.hasOwnProperty('content')) {
          obj['content'] = _ApiClient["default"].convertToType(data['content'], 'String');
          delete data['content'];
        }

        if (data.hasOwnProperty('object_id')) {
          obj['object_id'] = _ApiClient["default"].convertToType(data['object_id'], 'String');
          delete data['object_id'];
        }

        if (data.hasOwnProperty('object_type')) {
          obj['object_type'] = _ApiClient["default"].convertToType(data['object_type'], 'String');
          delete data['object_type'];
        }

        if (data.hasOwnProperty('user_id')) {
          obj['user_id'] = _ApiClient["default"].convertToType(data['user_id'], 'Number');
          delete data['user_id'];
        }

        if (data.hasOwnProperty('updater_id')) {
          obj['updater_id'] = _ApiClient["default"].convertToType(data['updater_id'], 'Number');
          delete data['updater_id'];
        }

        if (data.hasOwnProperty('company_id')) {
          obj['company_id'] = _ApiClient["default"].convertToType(data['company_id'], 'Number');
          delete data['company_id'];
        }

        if (Object.keys(data).length > 0) {
          Object.assign(obj, data);
        }
      }

      return obj;
    }
  }]);
  return BaseComment;
}();
/**
 * The ID of the note
 * @member {String} uuid
 */


BaseComment.prototype['uuid'] = undefined;
/**
 * Whether the note is active or deleted
 * @member {Boolean} active_flag
 */

BaseComment.prototype['active_flag'] = undefined;
/**
 * The creation date and time of the note
 * @member {String} add_time
 */

BaseComment.prototype['add_time'] = undefined;
/**
 * The creation date and time of the note
 * @member {String} update_time
 */

BaseComment.prototype['update_time'] = undefined;
/**
 * The content of the note in HTML format. Subject to sanitization on the back-end.
 * @member {String} content
 */

BaseComment.prototype['content'] = undefined;
/**
 * The ID of the object that the comment is attached to, will be the id of the note
 * @member {String} object_id
 */

BaseComment.prototype['object_id'] = undefined;
/**
 * The type of object that the comment is attached to, will be \"note\"
 * @member {String} object_type
 */

BaseComment.prototype['object_type'] = undefined;
/**
 * The ID of the user who created the comment
 * @member {Number} user_id
 */

BaseComment.prototype['user_id'] = undefined;
/**
 * The ID of the user who last updated the comment
 * @member {Number} updater_id
 */

BaseComment.prototype['updater_id'] = undefined;
/**
 * The ID of the company
 * @member {Number} company_id
 */

BaseComment.prototype['company_id'] = undefined;
var _default = BaseComment;
exports["default"] = _default;
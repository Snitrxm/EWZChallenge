"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _DeleteStageResponse = _interopRequireDefault(require("../model/DeleteStageResponse200"));

var _DeleteStagesResponse = _interopRequireDefault(require("../model/DeleteStagesResponse200"));

var _GetAddUpdateStage = _interopRequireDefault(require("../model/GetAddUpdateStage"));

var _GetOneStage = _interopRequireDefault(require("../model/GetOneStage"));

var _GetStageDeals = _interopRequireDefault(require("../model/GetStageDeals"));

var _GetStages = _interopRequireDefault(require("../model/GetStages"));

var _NumberBoolean = _interopRequireDefault(require("../model/NumberBoolean"));

var _Stage = _interopRequireDefault(require("../model/Stage"));

var _UpdateStageRequest = _interopRequireDefault(require("../model/UpdateStageRequest"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
* Stages service.
* @module api/StagesApi
* @version 1.0.0
*/
var StagesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new StagesApi. 
  * @alias module:api/StagesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function StagesApi(apiClient) {
    (0, _classCallCheck2["default"])(this, StagesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Add a new stage
   * Adds a new stage, returns the ID upon success.
   * @param {Object} opts Optional parameters
   * @param {module:model/Stage} opts.stage 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAddUpdateStage} and HTTP response
   */


  (0, _createClass2["default"])(StagesApi, [{
    key: "addStageWithHttpInfo",
    value: function addStageWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['stage'];
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetAddUpdateStage["default"];
      return this.apiClient.callApi('/stages', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Add a new stage
     * Adds a new stage, returns the ID upon success.
     * @param {Object} opts Optional parameters
     * @param {module:model/Stage} opts.stage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAddUpdateStage}
     */

  }, {
    key: "addStage",
    value: function addStage(opts) {
      return this.addStageWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Delete a stage
     * Marks a stage as deleted.
     * @param {Number} id The ID of the stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteStageResponse200} and HTTP response
     */

  }, {
    key: "deleteStageWithHttpInfo",
    value: function deleteStageWithHttpInfo(id) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteStage");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _DeleteStageResponse["default"];
      return this.apiClient.callApi('/stages/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a stage
     * Marks a stage as deleted.
     * @param {Number} id The ID of the stage
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteStageResponse200}
     */

  }, {
    key: "deleteStage",
    value: function deleteStage(id) {
      return this.deleteStageWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Delete multiple stages in bulk
     * Marks multiple stages as deleted.
     * @param {String} ids The comma-separated stage IDs to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteStagesResponse200} and HTTP response
     */

  }, {
    key: "deleteStagesWithHttpInfo",
    value: function deleteStagesWithHttpInfo(ids) {
      var opts = {};
      var postBody = null; // verify the required parameter 'ids' is set

      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling deleteStages");
      }

      var pathParams = {};
      var queryParams = {
        'ids': ids
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _DeleteStagesResponse["default"];
      return this.apiClient.callApi('/stages', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete multiple stages in bulk
     * Marks multiple stages as deleted.
     * @param {String} ids The comma-separated stage IDs to delete
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteStagesResponse200}
     */

  }, {
    key: "deleteStages",
    value: function deleteStages(ids) {
      return this.deleteStagesWithHttpInfo(ids).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get one stage
     * Returns data about a specific stage.
     * @param {Number} id The ID of the stage
     * @param {Object} opts Optional parameters
     * @param {module:model/NumberBoolean} opts.everyone If `everyone=1` is provided, deals summary will return deals owned by every user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetOneStage} and HTTP response
     */

  }, {
    key: "getStageWithHttpInfo",
    value: function getStageWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStage");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'everyone': opts['everyone']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetOneStage["default"];
      return this.apiClient.callApi('/stages/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get one stage
     * Returns data about a specific stage.
     * @param {Number} id The ID of the stage
     * @param {Object} opts Optional parameters
     * @param {module:model/NumberBoolean} opts.everyone If `everyone=1` is provided, deals summary will return deals owned by every user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetOneStage}
     */

  }, {
    key: "getStage",
    value: function getStage(id, opts) {
      return this.getStageWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get deals in a stage
     * Lists deals in a specific stage.
     * @param {Number} id The ID of the stage
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterId If supplied, only deals matching the given filter will be returned
     * @param {Number} opts.userId If supplied, `filter_id` will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {module:model/NumberBoolean} opts.everyone If supplied, `filter_id` and `user_id` will not be considered – instead, deals owned by everyone will be returned
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetStageDeals} and HTTP response
     */

  }, {
    key: "getStageDealsWithHttpInfo",
    value: function getStageDealsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getStageDeals");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'filter_id': opts['filterId'],
        'user_id': opts['userId'],
        'everyone': opts['everyone'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetStageDeals["default"];
      return this.apiClient.callApi('/stages/{id}/deals', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get deals in a stage
     * Lists deals in a specific stage.
     * @param {Number} id The ID of the stage
     * @param {Object} opts Optional parameters
     * @param {Number} opts.filterId If supplied, only deals matching the given filter will be returned
     * @param {Number} opts.userId If supplied, `filter_id` will not be considered and only deals owned by the given user will be returned. If omitted, deals owned by the authorized user will be returned.
     * @param {module:model/NumberBoolean} opts.everyone If supplied, `filter_id` and `user_id` will not be considered – instead, deals owned by everyone will be returned
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetStageDeals}
     */

  }, {
    key: "getStageDeals",
    value: function getStageDeals(id, opts) {
      return this.getStageDealsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get all stages
     * Returns data about all stages.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pipelineId The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetStages} and HTTP response
     */

  }, {
    key: "getStagesWithHttpInfo",
    value: function getStagesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'pipeline_id': opts['pipelineId']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetStages["default"];
      return this.apiClient.callApi('/stages', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get all stages
     * Returns data about all stages.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.pipelineId The ID of the pipeline to fetch stages for. If omitted, stages for all pipelines will be fetched.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetStages}
     */

  }, {
    key: "getStages",
    value: function getStages(opts) {
      return this.getStagesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Update stage details
     * Updates the properties of a stage.
     * @param {Number} id The ID of the stage
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateStageRequest} opts.updateStageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetAddUpdateStage} and HTTP response
     */

  }, {
    key: "updateStageWithHttpInfo",
    value: function updateStageWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = opts['updateStageRequest']; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateStage");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _GetAddUpdateStage["default"];
      return this.apiClient.callApi('/stages/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update stage details
     * Updates the properties of a stage.
     * @param {Number} id The ID of the stage
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateStageRequest} opts.updateStageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetAddUpdateStage}
     */

  }, {
    key: "updateStage",
    value: function updateStage(id, opts) {
      return this.updateStageWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
  }]);
  return StagesApi;
}();

exports["default"] = StagesApi;
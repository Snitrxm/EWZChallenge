"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _DeleteRole = _interopRequireDefault(require("../model/DeleteRole"));

var _DeleteRoleAssignment = _interopRequireDefault(require("../model/DeleteRoleAssignment"));

var _GetRole = _interopRequireDefault(require("../model/GetRole"));

var _GetRoleAssignments = _interopRequireDefault(require("../model/GetRoleAssignments"));

var _GetRoleSettings = _interopRequireDefault(require("../model/GetRoleSettings"));

var _GetRoleSubroles = _interopRequireDefault(require("../model/GetRoleSubroles"));

var _GetRoles = _interopRequireDefault(require("../model/GetRoles"));

var _PostRoleAssignment = _interopRequireDefault(require("../model/PostRoleAssignment"));

var _PostRoleSettings = _interopRequireDefault(require("../model/PostRoleSettings"));

var _PostRoles = _interopRequireDefault(require("../model/PostRoles"));

var _PutRole = _interopRequireDefault(require("../model/PutRole"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
* Roles service.
* @module api/RolesApi
* @version 1.0.0
*/
var RolesApi = /*#__PURE__*/function () {
  /**
  * Constructs a new RolesApi. 
  * @alias module:api/RolesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function RolesApi(apiClient) {
    (0, _classCallCheck2["default"])(this, RolesApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Add or update role setting
   * Adds or updates the visibility setting for a role.
   * @param {Number} id The ID of the role
   * @param {module:model/String} settingKey 
   * @param {module:model/Number} value Possible values for the `default_visibility` setting depending on the subscription plan:<br> <table class='role-setting'> <caption><b>Essential / Advanced plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner & Followers</td></tr> <tr><td>`3`</td><td>Entire company</td></tr> </table> <br> <table class='role-setting'> <caption><b>Professional / Enterprise plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner only</td></tr> <tr><td>`3`</td><td>Owner&#39;s visibility group</td></tr> <tr><td>`5`</td><td>Owner&#39;s visibility group and sub-groups</td></tr> <tr><td>`7`</td><td>Entire company</td></tr> </table> <br> Read more about visibility groups <a href='https://support.pipedrive.com/en/article/visibility-groups'>here</a>.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostRoleSettings} and HTTP response
   */


  (0, _createClass2["default"])(RolesApi, [{
    key: "addOrUpdateRoleSettingWithHttpInfo",
    value: function addOrUpdateRoleSettingWithHttpInfo(id, settingKey, value) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addOrUpdateRoleSetting");
      } // verify the required parameter 'settingKey' is set


      if (settingKey === undefined || settingKey === null) {
        throw new Error("Missing the required parameter 'settingKey' when calling addOrUpdateRoleSetting");
      } // verify the required parameter 'value' is set


      if (value === undefined || value === null) {
        throw new Error("Missing the required parameter 'value' when calling addOrUpdateRoleSetting");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'setting_key': settingKey,
        'value': value
      };
      var formParamArray = ['settingKey', 'value'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _PostRoleSettings["default"];
      return this.apiClient.callApi('/roles/{id}/settings', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Add or update role setting
     * Adds or updates the visibility setting for a role.
     * @param {Number} id The ID of the role
     * @param {module:model/String} settingKey 
     * @param {module:model/Number} value Possible values for the `default_visibility` setting depending on the subscription plan:<br> <table class='role-setting'> <caption><b>Essential / Advanced plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner & Followers</td></tr> <tr><td>`3`</td><td>Entire company</td></tr> </table> <br> <table class='role-setting'> <caption><b>Professional / Enterprise plan</b></caption> <tr><th><b>Value</b></th><th><b>Description</b></th></tr> <tr><td>`1`</td><td>Owner only</td></tr> <tr><td>`3`</td><td>Owner&#39;s visibility group</td></tr> <tr><td>`5`</td><td>Owner&#39;s visibility group and sub-groups</td></tr> <tr><td>`7`</td><td>Entire company</td></tr> </table> <br> Read more about visibility groups <a href='https://support.pipedrive.com/en/article/visibility-groups'>here</a>.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostRoleSettings}
     */

  }, {
    key: "addOrUpdateRoleSetting",
    value: function addOrUpdateRoleSetting(id, settingKey, value) {
      return this.addOrUpdateRoleSettingWithHttpInfo(id, settingKey, value).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Add a role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentRoleId The ID of the parent role
     * @param {String} opts.name The name of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostRoles} and HTTP response
     */

  }, {
    key: "addRoleWithHttpInfo",
    value: function addRoleWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'parent_role_id': opts['parentRoleId'],
        'name': opts['name']
      };
      var formParamArray = ['parentRoleId', 'name'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _PostRoles["default"];
      return this.apiClient.callApi('/roles', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Add a role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentRoleId The ID of the parent role
     * @param {String} opts.name The name of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostRoles}
     */

  }, {
    key: "addRole",
    value: function addRole(opts) {
      return this.addRoleWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Add role assignment
     * Adds assignment for a role.
     * @param {Number} id The ID of the role
     * @param {Number} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PostRoleAssignment} and HTTP response
     */

  }, {
    key: "addRoleAssignmentWithHttpInfo",
    value: function addRoleAssignmentWithHttpInfo(id, userId) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addRoleAssignment");
      } // verify the required parameter 'userId' is set


      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addRoleAssignment");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'user_id': userId
      };
      var formParamArray = ['userId'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _PostRoleAssignment["default"];
      return this.apiClient.callApi('/roles/{id}/assignments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Add role assignment
     * Adds assignment for a role.
     * @param {Number} id The ID of the role
     * @param {Number} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PostRoleAssignment}
     */

  }, {
    key: "addRoleAssignment",
    value: function addRoleAssignment(id, userId) {
      return this.addRoleAssignmentWithHttpInfo(id, userId).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Delete a role
     * @param {Number} id The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteRole} and HTTP response
     */

  }, {
    key: "deleteRoleWithHttpInfo",
    value: function deleteRoleWithHttpInfo(id) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRole");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _DeleteRole["default"];
      return this.apiClient.callApi('/roles/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a role
     * @param {Number} id The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteRole}
     */

  }, {
    key: "deleteRole",
    value: function deleteRole(id) {
      return this.deleteRoleWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Delete a role assignment
     * Deletes assignment from a role.
     * @param {Number} id The ID of the role
     * @param {Number} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeleteRoleAssignment} and HTTP response
     */

  }, {
    key: "deleteRoleAssignmentWithHttpInfo",
    value: function deleteRoleAssignmentWithHttpInfo(id, userId) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRoleAssignment");
      } // verify the required parameter 'userId' is set


      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteRoleAssignment");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'user_id': userId
      };
      var formParamArray = ['userId'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _DeleteRoleAssignment["default"];
      return this.apiClient.callApi('/roles/{id}/assignments', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete a role assignment
     * Deletes assignment from a role.
     * @param {Number} id The ID of the role
     * @param {Number} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeleteRoleAssignment}
     */

  }, {
    key: "deleteRoleAssignment",
    value: function deleteRoleAssignment(id, userId) {
      return this.deleteRoleAssignmentWithHttpInfo(id, userId).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get one role
     * @param {Number} id The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRole} and HTTP response
     */

  }, {
    key: "getRoleWithHttpInfo",
    value: function getRoleWithHttpInfo(id) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRole");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _GetRole["default"];
      return this.apiClient.callApi('/roles/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get one role
     * @param {Number} id The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRole}
     */

  }, {
    key: "getRole",
    value: function getRole(id) {
      return this.getRoleWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * List role assignments
     * Lists assignments for a role.
     * @param {Number} id The ID of the role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoleAssignments} and HTTP response
     */

  }, {
    key: "getRoleAssignmentsWithHttpInfo",
    value: function getRoleAssignmentsWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoleAssignments");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _GetRoleAssignments["default"];
      return this.apiClient.callApi('/roles/{id}/assignments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List role assignments
     * Lists assignments for a role.
     * @param {Number} id The ID of the role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoleAssignments}
     */

  }, {
    key: "getRoleAssignments",
    value: function getRoleAssignments(id, opts) {
      return this.getRoleAssignmentsWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * List role settings
     * @param {Number} id The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoleSettings} and HTTP response
     */

  }, {
    key: "getRoleSettingsWithHttpInfo",
    value: function getRoleSettingsWithHttpInfo(id) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoleSettings");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _GetRoleSettings["default"];
      return this.apiClient.callApi('/roles/{id}/settings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List role settings
     * @param {Number} id The ID of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoleSettings}
     */

  }, {
    key: "getRoleSettings",
    value: function getRoleSettings(id) {
      return this.getRoleSettingsWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * List role sub-roles
     * @param {Number} id The ID of the role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoleSubroles} and HTTP response
     */

  }, {
    key: "getRoleSubRolesWithHttpInfo",
    value: function getRoleSubRolesWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRoleSubRoles");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _GetRoleSubroles["default"];
      return this.apiClient.callApi('/roles/{id}/roles', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * List role sub-roles
     * @param {Number} id The ID of the role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoleSubroles}
     */

  }, {
    key: "getRoleSubRoles",
    value: function getRoleSubRoles(id, opts) {
      return this.getRoleSubRolesWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get all roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GetRoles} and HTTP response
     */

  }, {
    key: "getRolesWithHttpInfo",
    value: function getRolesWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;
      var pathParams = {};
      var queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _GetRoles["default"];
      return this.apiClient.callApi('/roles', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get all roles
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start Pagination start (default to 0)
     * @param {Number} opts.limit Items shown per page
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GetRoles}
     */

  }, {
    key: "getRoles",
    value: function getRoles(opts) {
      return this.getRolesWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Update role details
     * @param {Number} id The ID of the role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentRoleId The ID of the parent role
     * @param {String} opts.name The name of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PutRole} and HTTP response
     */

  }, {
    key: "updateRoleWithHttpInfo",
    value: function updateRoleWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRole");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {
        'parent_role_id': opts['parentRoleId'],
        'name': opts['name']
      };
      var formParamArray = ['parentRoleId', 'name'];
      var contentTypes = ['application/x-www-form-urlencoded'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key'];
      var accepts = ['application/json'];
      var returnType = _PutRole["default"];
      return this.apiClient.callApi('/roles/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update role details
     * @param {Number} id The ID of the role
     * @param {Object} opts Optional parameters
     * @param {Number} opts.parentRoleId The ID of the parent role
     * @param {String} opts.name The name of the role
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PutRole}
     */

  }, {
    key: "updateRole",
    value: function updateRole(id, opts) {
      return this.updateRoleWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
  }]);
  return RolesApi;
}();

exports["default"] = RolesApi;
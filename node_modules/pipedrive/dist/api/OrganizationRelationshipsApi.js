"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _ApiClient = _interopRequireDefault(require("../ApiClient"));

var _AddOrganizationRelationshipRequest = _interopRequireDefault(require("../model/AddOrganizationRelationshipRequest"));

var _AllOrganizationRelationshipsGetResponse = _interopRequireDefault(require("../model/AllOrganizationRelationshipsGetResponse"));

var _OrganizationRelationship = _interopRequireDefault(require("../model/OrganizationRelationship"));

var _OrganizationRelationshipDeleteResponse = _interopRequireDefault(require("../model/OrganizationRelationshipDeleteResponse"));

var _OrganizationRelationshipGetResponse = _interopRequireDefault(require("../model/OrganizationRelationshipGetResponse"));

var _OrganizationRelationshipPostResponse = _interopRequireDefault(require("../model/OrganizationRelationshipPostResponse"));

var _OrganizationRelationshipUpdateResponse = _interopRequireDefault(require("../model/OrganizationRelationshipUpdateResponse"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
* OrganizationRelationships service.
* @module api/OrganizationRelationshipsApi
* @version 1.0.0
*/
var OrganizationRelationshipsApi = /*#__PURE__*/function () {
  /**
  * Constructs a new OrganizationRelationshipsApi. 
  * @alias module:api/OrganizationRelationshipsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  function OrganizationRelationshipsApi(apiClient) {
    (0, _classCallCheck2["default"])(this, OrganizationRelationshipsApi);
    this.apiClient = apiClient || _ApiClient["default"].instance;
  }
  /**
   * Create an organization relationship
   * Creates and returns an organization relationship.
   * @param {Object} opts Optional parameters
   * @param {module:model/AddOrganizationRelationshipRequest} opts.addOrganizationRelationshipRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationRelationshipPostResponse} and HTTP response
   */


  (0, _createClass2["default"])(OrganizationRelationshipsApi, [{
    key: "addOrganizationRelationshipWithHttpInfo",
    value: function addOrganizationRelationshipWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = opts['addOrganizationRelationshipRequest'];

      if (opts['type'] === undefined || opts['type'] === null) {
        throw new Error("Missing the required parameter 'type' when calling addOrganizationRelationship");
      }

      if (opts['rel_owner_org_id'] === undefined || opts['rel_owner_org_id'] === null) {
        throw new Error("Missing the required parameter 'rel_owner_org_id' when calling addOrganizationRelationship");
      }

      if (opts['rel_linked_org_id'] === undefined || opts['rel_linked_org_id'] === null) {
        throw new Error("Missing the required parameter 'rel_linked_org_id' when calling addOrganizationRelationship");
      }

      var pathParams = {};
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _OrganizationRelationshipPostResponse["default"];
      return this.apiClient.callApi('/organizationRelationships', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Create an organization relationship
     * Creates and returns an organization relationship.
     * @param {Object} opts Optional parameters
     * @param {module:model/AddOrganizationRelationshipRequest} opts.addOrganizationRelationshipRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationRelationshipPostResponse}
     */

  }, {
    key: "addOrganizationRelationship",
    value: function addOrganizationRelationship(opts) {
      return this.addOrganizationRelationshipWithHttpInfo(opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Delete an organization relationship
     * Deletes an organization relationship and returns the deleted ID.
     * @param {Number} id The ID of the organization relationship
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationRelationshipDeleteResponse} and HTTP response
     */

  }, {
    key: "deleteOrganizationRelationshipWithHttpInfo",
    value: function deleteOrganizationRelationshipWithHttpInfo(id) {
      var opts = {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteOrganizationRelationship");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _OrganizationRelationshipDeleteResponse["default"];
      return this.apiClient.callApi('/organizationRelationships/{id}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Delete an organization relationship
     * Deletes an organization relationship and returns the deleted ID.
     * @param {Number} id The ID of the organization relationship
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationRelationshipDeleteResponse}
     */

  }, {
    key: "deleteOrganizationRelationship",
    value: function deleteOrganizationRelationship(id) {
      return this.deleteOrganizationRelationshipWithHttpInfo(id).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get one organization relationship
     * Finds and returns an organization relationship from its ID.
     * @param {Number} id The ID of the organization relationship
     * @param {Object} opts Optional parameters
     * @param {Number} opts.orgId The ID of the base organization for the returned calculated values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationRelationshipGetResponse} and HTTP response
     */

  }, {
    key: "getOrganizationRelationshipWithHttpInfo",
    value: function getOrganizationRelationshipWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = null; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOrganizationRelationship");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {
        'org_id': opts['orgId']
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _OrganizationRelationshipGetResponse["default"];
      return this.apiClient.callApi('/organizationRelationships/{id}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get one organization relationship
     * Finds and returns an organization relationship from its ID.
     * @param {Number} id The ID of the organization relationship
     * @param {Object} opts Optional parameters
     * @param {Number} opts.orgId The ID of the base organization for the returned calculated values
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationRelationshipGetResponse}
     */

  }, {
    key: "getOrganizationRelationship",
    value: function getOrganizationRelationship(id, opts) {
      return this.getOrganizationRelationshipWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Get all relationships for organization
     * Gets all of the relationships for a supplied organization ID.
     * @param {Number} orgId The ID of the organization to get relationships for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AllOrganizationRelationshipsGetResponse} and HTTP response
     */

  }, {
    key: "getOrganizationRelationshipsWithHttpInfo",
    value: function getOrganizationRelationshipsWithHttpInfo(orgId) {
      var opts = {};
      var postBody = null; // verify the required parameter 'orgId' is set

      if (orgId === undefined || orgId === null) {
        throw new Error("Missing the required parameter 'orgId' when calling getOrganizationRelationships");
      }

      var pathParams = {};
      var queryParams = {
        'org_id': orgId
      };
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = [];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _AllOrganizationRelationshipsGetResponse["default"];
      return this.apiClient.callApi('/organizationRelationships', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Get all relationships for organization
     * Gets all of the relationships for a supplied organization ID.
     * @param {Number} orgId The ID of the organization to get relationships for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AllOrganizationRelationshipsGetResponse}
     */

  }, {
    key: "getOrganizationRelationships",
    value: function getOrganizationRelationships(orgId) {
      return this.getOrganizationRelationshipsWithHttpInfo(orgId).then(function (response_and_data) {
        return response_and_data;
      });
    }
    /**
     * Update an organization relationship
     * Updates and returns an organization relationship.
     * @param {Number} id The ID of the organization relationship
     * @param {Object} opts Optional parameters
     * @param {module:model/OrganizationRelationship} opts.organizationRelationship 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/OrganizationRelationshipUpdateResponse} and HTTP response
     */

  }, {
    key: "updateOrganizationRelationshipWithHttpInfo",
    value: function updateOrganizationRelationshipWithHttpInfo(id, opts) {
      opts = opts || {};
      var postBody = opts['organizationRelationship']; // verify the required parameter 'id' is set

      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateOrganizationRelationship");
      }

      var pathParams = {
        'id': id
      };
      var queryParams = {};
      var headerParams = {};
      var formParams = {};
      var formParamArray = [];
      var contentTypes = ['application/json'];
      var isURLEncoded = contentTypes.includes('application/x-www-form-urlencoded');
      var isJSON = contentTypes.includes('application/json');

      if (isJSON) {
        postBody = _objectSpread(_objectSpread({}, postBody), opts);
      } else if (isURLEncoded) {
        for (var key in opts) {
          if (opts.hasOwnProperty(key) && !formParamArray.includes(key)) {
            formParams[key] = opts[key];
          }
        }
      }

      var authNames = ['api_key', 'oauth2'];
      var accepts = ['application/json'];
      var returnType = _OrganizationRelationshipUpdateResponse["default"];
      return this.apiClient.callApi('/organizationRelationships/{id}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
    }
    /**
     * Update an organization relationship
     * Updates and returns an organization relationship.
     * @param {Number} id The ID of the organization relationship
     * @param {Object} opts Optional parameters
     * @param {module:model/OrganizationRelationship} opts.organizationRelationship 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/OrganizationRelationshipUpdateResponse}
     */

  }, {
    key: "updateOrganizationRelationship",
    value: function updateOrganizationRelationship(id, opts) {
      return this.updateOrganizationRelationshipWithHttpInfo(id, opts).then(function (response_and_data) {
        return response_and_data;
      });
    }
  }]);
  return OrganizationRelationshipsApi;
}();

exports["default"] = OrganizationRelationshipsApi;